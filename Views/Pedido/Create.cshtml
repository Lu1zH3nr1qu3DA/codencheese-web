@model WebHamburgueria.ViewModels.PedidoViewModel

@{
    ViewBag.Title = "Criar Novo Pedido";
}

<section style="padding-bottom: 1em;">
    <div class="container d-flex justify-content-center align-items-center">
        <div class="card shadow-lg" style="width: 600px; border-radius: 1rem;">
            <div class="card-body p-5">
                <h3 class="card-title text-center mb-4">Novo Produto</h3>
                @using (Html.BeginForm("Create", "Pedido", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()

                    <div class="mb-3">
                        @Html.LabelFor(m => m.CpfUsuario, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.CpfUsuario, new { @class = "form-control", placeholder = "Digite o CPF do usuário" })
                        @Html.ValidationMessageFor(m => m.CpfUsuario, "", new { @class = "text-danger" })
                    </div>
                    <hr />
                    <div class="mb-3">
                        <label class="form-label">Itens do Pedido</label>
                        <div class="table-responsive">
                            <table class="table" id="itens-table">
                                <thead>
                                    <tr>
                                        <th>Produto</th>
                                        <th>Preço</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < Model.Itens.Count; i++)
                                    {
                                        <tr>
                                            <td>
                                                @Html.TextBoxFor(m => m.Itens[i].NomeProduto, new { @class = "form-control", placeholder = "Nome do produto" })
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(m => m.Itens[i].PrecoProduto, new { @class = "form-control", placeholder = "0.00", type = "number", step = "0.01" })
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-danger action-button" onclick="removeRow(this)">Remover</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <button type="button" class="btn btn-success mt-2" id="addItem">Adicionar Item</button>
                    <hr />
                    <div class="mb-3">
                        @Html.LabelFor(model => model.MetPag, new { @class = "form-label" })
                        @Html.DropDownListFor(model => model.MetPag,
                            new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Dinheiro", Value = "R" },
                                new SelectListItem { Text = "Pix", Value = "P" },
                                new SelectListItem { Text = "Débito", Value = "D" },
                                new SelectListItem { Text = "Crédito", Value = "C" }
                            }, "Selecione", new { @class = "form-select" })
                        @Html.ValidationMessageFor(model => model.MetPag, null, new { @class = "text-danger" })
                    </div>
                    <br />
                    <br />
                    <br />
                    <div class="d-grid gap-2">
                        <button type="submit" value="Create" class="btn btn-primary btn-lg">Salvar</button>
                    </div>
                }
                <div class="mt-3 text-center">
                    @Html.ActionLink("Voltar para Lista", "Index", null, new { @class = "btn btn-secondary" })
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts {
    <script>
        let itensTable = document.getElementById('itens-table').getElementsByTagName('tbody')[0];
        let addItemButton = document.getElementById('addItem');
        // Inicia o índice com o total de itens que vieram do servidor (se vierem)
        let rowIndex = @Model.Itens.Count;

        addItemButton.addEventListener('click', function() {
            let row = itensTable.insertRow();
            let nomeCell = row.insertCell(0);
            let precoCell = row.insertCell(1);
            let removeCell = row.insertCell(2);

            nomeCell.innerHTML = `<input class="form-control" name="Itens[${rowIndex}].NomeProduto" placeholder="Nome do produto" type="text" />`;
            precoCell.innerHTML = `<input class="form-control" name="Itens[${rowIndex}].PrecoProduto" placeholder="0.00" type="number" step="0.01" />`;
            removeCell.innerHTML = `<button type="button" class="btn btn-danger" onclick="removeRow(this)">Remover</button>`;

            rowIndex++;
        });

        function removeRow(btn) {
            let row = btn.parentNode.parentNode;
            row.parentNode.removeChild(row);
        }
    </script>
}
